// Generated by CoffeeScript 1.7.1
(function() {
  var EventEmitter, PageParser, cheerio, moment, url,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  url = require('url');

  cheerio = require('cheerio');

  moment = require('moment');

  module.exports = PageParser = (function(_super) {
    __extends(PageParser, _super);

    function PageParser(host, html, config) {
      this.host = host;
      this.html = html;
      this.config = config;
      PageParser.__super__.constructor.call(this);
      this.$ = cheerio.load(this.html);
      this.selectors = this.config.selectors;
      moment.lang(this.config.language);
    }

    PageParser.prototype.start = function() {
      var $, self, totalItems;
      totalItems = 0;
      self = this;
      $ = this.$;
      $(this.selectors.item.block).each(function() {
        var $block, item;
        $block = $(this);
        item = {
          title: $block.find(self.selectors.item.title).text(),
          author: $block.find(self.selectors.item.author).text(),
          description: $block.find(self.selectors.item.description).html(),
          url: url.resolve(self.host, $block.find(self.selectors.item.link).attr('href')),
          date: moment($block.find(self.selectors.item.pubDate).text() || date - ++totalItems)
        };
        return self.emit('item', item);
      });
      return this.emit('end');
    };

    Object.defineProperty(PageParser.prototype, 'nextPage', {
      get: function() {
        var element, href;
        element = this.$(this.selectors.nextPage);
        href = element.is('a') ? element.attr('href') : element.find('a').attr('href') || '';
        if (url) {
          return url.resolve(this.host, href);
        } else {
          return null;
        }
      }
    });

    Object.defineProperty(PageParser.prototype, 'hasNext', {
      get: function() {
        return this.$(this.selectors.nextPage).length;
      }
    });

    return PageParser;

  })(EventEmitter);

}).call(this);
